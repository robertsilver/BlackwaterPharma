using System;
using System.Collections.Generic;
using System.Text;
using System.Net.Mail;
using System.Collections.Specialized;

namespace AngliaTemplate
{
	/// <summary>
	/// Encapsulates common email functionality required for web applications.
	/// </summary>
	public class Email
	{

		public static string CheckAddress(string email)
		{
			return email.Replace('[', '<').Replace(']', '>');
		}

		/// <summary>
		/// The subject line for the email.
		/// </summary>
		public string Subject
		{
			get { return _subject; }
			set
			{
				_subject = value;
			}
		}
		private string _subject = "";


		/// <summary>
		/// The string builder containing the email body. {get;}
		/// </summary>
		public System.Text.StringBuilder Body
		{
			get
			{
				if (this._body == null)
					this._body = new System.Text.StringBuilder();
				return this._body;
			}
		}
		private System.Text.StringBuilder _body;


		/// <summary>
		/// Show the server variables in the email. Default is false. {get;set;}
		/// </summary>
		public bool ShowServerVariables
		{
			get { return _serverVariables; }
			set { _serverVariables = value; }
		}
		private bool _serverVariables = false;


		/// <summary>
		/// Show the client browser properties. Default is false. {get;set;}
		/// </summary>
		public bool ShowClientInfo
		{
			get { return _clientInfo; }
			set { _clientInfo = value; }
		}
		private bool _clientInfo = false;


		/// <summary>
		/// Show the last exception generated by the web application. Default is false. {get;set;}
		/// </summary>
		public bool ShowLastError
		{
			get { return _showLastError; }
			set { _showLastError = value; }
		}
		private bool _showLastError = false;


		/// <summary>
		/// The current HTTP context's Request object.
		/// </summary>
		private System.Web.HttpRequest Request
		{
			get
			{
				if (this._request == null)
				{
					this._request = System.Web.HttpContext.Current.Request;
				}
				return this._request;
			}
		}
		private System.Web.HttpRequest _request;


		/// <summary>
		/// The email or semi-colon list of emails to send to. {set;}
		/// </summary>
		/// <remarks>
		/// If not set then the config files "EmailErrorsList" setting is used.
		/// </remarks>
		public string To
		{
			set
			{
				if (value==null || value.Length == 0)
				{
					this._toEmails = new string[] { "support@angliabs.com" };
					return;
				}
				this._toEmails = value.Split(';');
			}
			get
			{
				string toAddresses = "";
				for (int i = 0; i < this._toEmails.Length; i++)
				{
					toAddresses += (i > 0 ? "; " + this._toEmails[i] : this._toEmails[i]);
				}
				return toAddresses;
			}
		}
		private string[] _toEmails;


		/// <summary>
		/// The email address to send the email from.
		/// </summary>
		/// <remarks>
		/// If not set then the config files "EmailErrorFrom" setting is used.
		/// </remarks>
		public MailAddress From
		{
			get
			{
				return this._from;
			}
			set
			{
				try
				{
					this._from = value;
				}
				catch
				{
					this._from = new MailAddress("support@angliabs.com");
				}
			}
		}
		private MailAddress _from;


		/// <summary>
		/// If set to TRUE then the email will be HTML enabled.
		/// </summary>
		public bool Html
		{
			get { return html; }
			set { html = value; }
		}
		private bool html = false;

		/// <summary>
		/// Send the email.
		/// </summary>
		/// <remarks>
		/// If values are not specified in the properties then the config file will
		/// be searched for the appropriate values.
		/// </remarks>
		public void Send()
		{
			try
			{
				if (this.ShowClientInfo)
					this.setClientInfo();
				if (this.ShowServerVariables)
					this.setServerVariables();

				if (this._toEmails == null)
					this.To = Core.AppSetting("EmailErrorsList");

				System.Net.Mail.MailMessage mailer = new System.Net.Mail.MailMessage();
				if (this.From == null)
				{
					string emailFrom = Core.AppSetting("FromMailAddress");
					if (emailFrom==null || emailFrom.Length == 0)
						emailFrom = "support@angliabs.com";
					this.From = new System.Net.Mail.MailAddress(emailFrom);
				}
				for (int i = 0; i < this._toEmails.Length; i++)
				{
					mailer.To.Add(this._toEmails[i]);
				}
				mailer.IsBodyHtml = this.Html;
				mailer.Subject = this.Subject;
				mailer.Body = this.Body.ToString();
					mailer.From = this.From;
				System.Diagnostics.Debug.WriteLine(mailer.Body);
				System.Net.Mail.SmtpClient client = new System.Net.Mail.SmtpClient(Core.AppSetting("EmailServer"));
				string emailCredentials = AngliaTemplate.Core.AppSetting("EmailCredential");
				if(emailCredentials!=null && emailCredentials.Length>0)
					client.Credentials =new System.Net.NetworkCredential(emailCredentials,AngliaTemplate.Core.AppSetting("EmailCredentialPassword"));
				client.Send(mailer);
			}
			catch(System.Exception ex)
			{
				AngliaTemplate.Utility.LogToDBEventLog("Email", "Send", "Failed to send to " + this.To +"\r\n" + ex.ToString(), "Error");
			}
		}



		#region Body setup

		private void setServerVariables()
		{

			if (this.Body.Length > 0)
				this.Body.Append("\r\n\r\n");
			this.Body.Append("\r\nServer variables\r\n----------------\r\n");
			int loop1, loop2;
			NameValueCollection coll;

			// Load ServerVariable collection into NameValueCollection object.
			coll = Request.ServerVariables;
			// Get names of all keys into a string array.
			String[] arr1 = coll.AllKeys;
			for (loop1 = 0; loop1 < arr1.Length; loop1++)
			{
				this.Body.Append("Key: " + arr1[loop1] + "\r\n");
				String[] arr2 = coll.GetValues(arr1[loop1]);
				for (loop2 = 0; loop2 < arr2.Length; loop2++)
				{
					this.Body.Append("Value " + loop2 + ": " + System.Web.HttpContext.Current.Server.HtmlEncode(arr2[loop2]) + "\r\n");
				}
			}
		}



		private void setClientInfo()
		{
			if (this.Body.Length > 0)
				this.Body.Append("\r\n\r\n");
			this.Body.Append("\r\nClient info\r\n-----------\r\n"
					+ this.Request.RawUrl + "\r\n"
					+ "Client IP: " + this.Request.UserHostAddress
					+ "UserAgent: " + this.Request.UserAgent);
		}

		private void setExceptionInfo()
		{
			if (this.Body.Length > 0)
				this.Body.Append("\r\n\r\n");
			System.Exception ex = System.Web.HttpContext.Current.Server.GetLastError();
			this.Body.Append(ex.ToString());
		}

		#endregion Body setup
	}
}
